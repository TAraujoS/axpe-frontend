// Script para monitorar performance de renderiza√ß√£o
// Cole este c√≥digo no console do navegador (F12)

console.log('üîß [PERFORMANCE DEBUG] ===== MONITOR DE RENDERIZA√á√ÉO =====');

// Fun√ß√£o para medir tempo de renderiza√ß√£o
function measureRenderTime() {
  console.log('üîç [PERFORMANCE DEBUG] Medindo tempo de renderiza√ß√£o...');
  
  const startTime = performance.now();
  
  // Aguardar pr√≥xima frame para medir renderiza√ß√£o
  requestAnimationFrame(() => {
    const endTime = performance.now();
    const renderTime = endTime - startTime;
    
    console.log(`‚è±Ô∏è [PERFORMANCE DEBUG] Tempo de renderiza√ß√£o: ${renderTime.toFixed(2)}ms`);
    
    if (renderTime > 100) {
      console.log('‚ö†Ô∏è [PERFORMANCE DEBUG] Tempo de renderiza√ß√£o alto detectado!');
    } else {
      console.log('‚úÖ [PERFORMANCE DEBUG] Tempo de renderiza√ß√£o aceit√°vel');
    }
  });
}

// Fun√ß√£o para verificar elementos cr√≠ticos
function checkCriticalElements() {
  console.log('üîç [PERFORMANCE DEBUG] Verificando elementos cr√≠ticos...');
  
  // Verificar hero
  const hero = document.querySelector('.hero-image');
  const heroText = document.querySelector('.hero-info h2');
  const heroParagraph = document.querySelector('.hero-info p');
  
  console.log('üè† Hero image encontrado:', !!hero);
  console.log('üìù Hero title encontrado:', !!heroText);
  console.log('üìÑ Hero paragraph encontrado:', !!heroParagraph);
  
  // Verificar se elementos est√£o vis√≠veis
  if (hero) {
    const rect = hero.getBoundingClientRect();
    console.log('üëÅÔ∏è Hero vis√≠vel:', rect.width > 0 && rect.height > 0);
  }
  
  if (heroText) {
    const rect = heroText.getBoundingClientRect();
    console.log('üëÅÔ∏è Hero text vis√≠vel:', rect.width > 0 && rect.height > 0);
  }
  
  if (heroParagraph) {
    const rect = heroParagraph.getBoundingClientRect();
    console.log('üëÅÔ∏è Hero paragraph vis√≠vel:', rect.width > 0 && rect.height > 0);
  }
}

// Fun√ß√£o para verificar recursos carregados
function checkLoadedResources() {
  console.log('üîç [PERFORMANCE DEBUG] Verificando recursos carregados...');
  
  // Verificar imagens
  const images = document.querySelectorAll('img');
  const loadedImages = Array.from(images).filter(img => img.complete);
  
  console.log(`üñºÔ∏è Imagens carregadas: ${loadedImages.length}/${images.length}`);
  
  // Verificar scripts
  const scripts = document.querySelectorAll('script[src]');
  console.log(`üìú Scripts externos: ${scripts.length}`);
  
  // Verificar CSS
  const stylesheets = document.querySelectorAll('link[rel="stylesheet"]');
  console.log(`üé® Stylesheets: ${stylesheets.length}`);
}

// Fun√ß√£o para verificar performance de rede
function checkNetworkPerformance() {
  console.log('üîç [PERFORMANCE DEBUG] Verificando performance de rede...');
  
  if ('performance' in window && 'getEntriesByType' in performance) {
    const navigationEntries = performance.getEntriesByType('navigation');
    const resourceEntries = performance.getEntriesByType('resource');
    
    if (navigationEntries.length > 0) {
      const nav = navigationEntries[0];
      console.log('üåê Tempo de carregamento da p√°gina:', nav.loadEventEnd - nav.loadEventStart, 'ms');
      console.log('‚ö° Tempo de resposta do servidor:', nav.responseEnd - nav.requestStart, 'ms');
      console.log('üé® Tempo de renderiza√ß√£o DOM:', nav.domContentLoadedEventEnd - nav.domContentLoadedEventStart, 'ms');
    }
    
    // Verificar recursos lentos
    const slowResources = resourceEntries.filter(resource => 
      resource.duration > 1000
    );
    
    if (slowResources.length > 0) {
      console.log('üêå Recursos lentos encontrados:');
      slowResources.forEach(resource => {
        console.log(`   - ${resource.name}: ${resource.duration.toFixed(2)}ms`);
      });
    } else {
      console.log('‚úÖ Todos os recursos carregados rapidamente');
    }
  }
}

// Fun√ß√£o para verificar LCP
function checkLCP() {
  console.log('üîç [PERFORMANCE DEBUG] Verificando LCP...');
  
  if ('PerformanceObserver' in window) {
    try {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry) => {
          console.log('üéØ LCP detectado:', entry.element?.tagName, entry.startTime, 'ms');
          console.log('üìè Tamanho do elemento LCP:', entry.size);
        });
      });
      
      observer.observe({ entryTypes: ['largest-contentful-paint'] });
      
      // Verificar LCP ap√≥s 3 segundos
      setTimeout(() => {
        observer.disconnect();
        console.log('‚úÖ Monitoramento LCP conclu√≠do');
      }, 3000);
    } catch (error) {
      console.log('‚ùå Erro ao monitorar LCP:', error);
    }
  }
}

// Fun√ß√£o para otimiza√ß√µes sugeridas
function suggestOptimizations() {
  console.log('üí° [PERFORMANCE DEBUG] Sugest√µes de otimiza√ß√£o:');
  
  // Verificar lazy loading
  const images = document.querySelectorAll('img');
  const lazyImages = Array.from(images).filter(img => img.loading === 'lazy');
  console.log(`üñºÔ∏è Imagens com lazy loading: ${lazyImages.length}/${images.length}`);
  
  // Verificar preload
  const preloads = document.querySelectorAll('link[rel="preload"]');
  console.log(`‚ö° Preloads configurados: ${preloads.length}`);
  
  // Verificar fontes
  const fonts = document.querySelectorAll('link[rel="preload"][as="font"]');
  console.log(`üî§ Fontes pr√©-carregadas: ${fonts.length}`);
  
  // Sugest√µes
  if (lazyImages.length < images.length * 0.5) {
    console.log('üí° Sugest√£o: Adicionar lazy loading em mais imagens');
  }
  
  if (preloads.length < 3) {
    console.log('üí° Sugest√£o: Adicionar mais preloads para recursos cr√≠ticos');
  }
  
  if (fonts.length === 0) {
    console.log('üí° Sugest√£o: Pr√©-carregar fontes cr√≠ticas');
  }
}

// Expor fun√ß√µes globalmente
window.renderPerformance = {
  measure: measureRenderTime,
  checkElements: checkCriticalElements,
  checkResources: checkLoadedResources,
  checkNetwork: checkNetworkPerformance,
  checkLCP: checkLCP,
  suggest: suggestOptimizations
};

// Executar verifica√ß√µes iniciais
setTimeout(() => {
  checkCriticalElements();
  checkLoadedResources();
  checkNetworkPerformance();
  suggestOptimizations();
}, 1000);

console.log('üí° [PERFORMANCE DEBUG] Use:');
console.log('   renderPerformance.measure() - medir tempo de renderiza√ß√£o');
console.log('   renderPerformance.checkElements() - verificar elementos cr√≠ticos');
console.log('   renderPerformance.checkResources() - verificar recursos');
console.log('   renderPerformance.checkNetwork() - verificar performance de rede');
console.log('   renderPerformance.checkLCP() - monitorar LCP');
console.log('   renderPerformance.suggest() - sugest√µes de otimiza√ß√£o'); 